#Adding marital variable (single/divorced) with a Dummy variable 0/1
banktest1$new_marital <- ifelse(banktest1$marital == "single", 1,
ifelse(banktest1$marital == "divorced", 0,
ifelse(banktest1$marital == "married", 2, NA)))
#Adding education variable with a Dummy variable 0/1
banktest1$new_education <- ifelse(banktest1$education == "primary", 0,
ifelse(banktest1$education == "secondary", 1,
ifelse(banktest1$education == "tertiary", 2, NA)))
#adding housing variable (yes/no) with dummy variable 0/1
banktest1$new_housing <- ifelse(banktest1$housing == "no", 0, 1)
# check how many "unknown" values are left
banktest1 %>%
summarise_all(list(~sum(. == "unknown"))) %>%
gather(key = "variable", value = "nr_unknown") %>%
arrange(-nr_unknown)
View(banktest1)
library(caret)
df <- banktest1 ##load data
columns <- c("age", "duration", "balance")
bank_two <- df[columns]
head(bank_two) ## see the studcture
##Generate a random number that is 90% of the total number of rows in dataset.
ran <- sample(1:nrow(bank_two), 0.9 * nrow(bank_two))
##the normalization function is created
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
##Run nomalization on first three coulumns of dataset because they are the predictor
bank_norm <- as.data.frame(lapply(bank_two[,c(1,2,3)], nor))
summary(bank_norm)
##extract training set
bank_train <- bank_norm[ran,]
##extract testing set
bank_test <- bank_norm[-ran,]
##extract 1 column of train dataset because it will be used as 'cl' argument in knn function.
bank_target_category <- bank_two[ran,1]
##extract 1 column if test dataset to measure the accuracy
bank_test_category <- bank_two[-ran,1]
##load the package class
library(class)
##run knn function
pr <- knn(bank_train,bank_test,cl=bank_target_category,k=13)
##create confusion matrix
tab <- table(pr,bank_test_category)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
precision <-
precision <-
precision <-
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
df <- banktest1 ##load data
columns <- c("age", "duration", "balance")
bank_two <- df[columns]
head(bank_two) ## see the studcture
##Generate a random number that is 90% of the total number of rows in dataset.
ran <- sample(1:nrow(bank_two), 0.9 * nrow(bank_two))
##the normalization function is created
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
##Run nomalization on first three coulumns of dataset because they are the predictor
bank_norm <- as.data.frame(lapply(bank_two[,c(1,2,3)], nor))
summary(bank_norm)
##extract training set
bank_train <- bank_norm[ran,]
##extract testing set
bank_test <- bank_norm[-ran,]
##extract 1 column of train dataset because it will be used as 'cl' argument in knn function.
bank_target_category <- bank_two[ran,1]
##extract 1 column if test dataset to measure the accuracy
bank_test_category <- bank_two[-ran,1]
##load the package class
library(class)
##run knn function
pr <- knn(bank_train,bank_test,cl=bank_target_category,k=13)
##create confusion matrix
tab <- table(pr,bank_test_category)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
library(caret)
df <- banktest1 ##load data
columns <- c("age", "duration", "balance")
bank_two <- df[columns]
head(bank_two) ## see the studcture
##Generate a random number that is 90% of the total number of rows in dataset.
ran <- sample(1:nrow(bank_two), 0.9 * nrow(bank_two))
##the normalization function is created
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
##Run nomalization on first three coulumns of dataset because they are the predictor
bank_norm <- as.data.frame(lapply(bank_two[,c(1,2,3)], nor))
summary(bank_norm)
##extract training set
bank_train <- bank_norm[ran,]
##extract testing set
bank_test <- bank_norm[-ran,]
##extract 1 column of train dataset because it will be used as 'cl' argument in knn function.
bank_target_category <- bank_two[ran,1]
##extract 1 column if test dataset to measure the accuracy
bank_test_category <- bank_two[-ran,1]
##load the package class
library(class)
##run knn function
pr <- knn(bank_train,bank_test,cl=bank_target_category,k=13)
##create confusion matrix
tab <- table(pr,bank_test_category)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
df <- banktest1 ##load prepared data
columns <- c("age", "duration", "balance")
bank_two <- df[columns]
head(bank_two) ## see the structure
##Generate a random number that is 90% of the total number of rows in dataset.
ran <- sample(1:nrow(bank_two), 0.9 * nrow(bank_two))
##the normalization function is created
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
##Run nomalization on first three coulumns of dataset because they are the predictor
bank_norm <- as.data.frame(lapply(bank_two[,c(1,2,3)], nor))
summary(bank_norm)
##extract training set
bank_train <- bank_norm[ran,]
##extract testing set
bank_test <- bank_norm[-ran,]
##extract 1 column of train dataset because it will be used as 'cl' argument in knn function.
bank_target_category <- bank_two[ran,1]
##extract 1 column if test dataset to measure the accuracy
bank_test_category <- bank_two[-ran,1]
##load the package class
library(class)
##run knn function
pr <- knn(bank_train,bank_test,cl=bank_target_category,k=13)
##create confusion matrix
tab <- table(pr,bank_test_category)
##this function divides the correct predictions by total number of predictions that tell us how accurate the model is.
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
df <- banktest1 ##load prepared data
library(dplyr)
library(tidyr)
banktest1 <- bank
banktest1 <- banktest1[, -which(names(banktest1) == "poutcome")]
# find rows with "unknown" values and remove them
banktest1 <- banktest1 %>%
filter_all(any_vars(!is.na(.) & . != "unknown"))
#change unknown to other value in job column
mode_val <- as.character(names(which.max(table(banktest1$job))))
banktest1$job <- ifelse(banktest1$job == "unknown", mode_val, banktest1$job)
bank <- read.csv("~/GitHub/Data-Analytic-ASS3/data set/bank.csv", sep=";")
View(bank)
library(dplyr)
library(tidyr)
banktest1 <- bank
banktest1 <- banktest1[, -which(names(banktest1) == "poutcome")]
# find rows with "unknown" values and remove them
banktest1 <- banktest1 %>%
filter_all(any_vars(!is.na(.) & . != "unknown"))
#change unknown to other value in job column
mode_val <- as.character(names(which.max(table(banktest1$job))))
banktest1$job <- ifelse(banktest1$job == "unknown", mode_val, banktest1$job)
print(banktest1)
#change unknown to other value in education column
mode_val <- as.character(names(which.max(table(banktest1$education))))
banktest1$education <- ifelse(banktest1$education == "unknown", mode_val, banktest1$education)
print(banktest1)
#change unknown to other value in contact column
mode_val <- as.character(names(which.max(table(banktest1$contact))))
banktest1$contact <- ifelse(banktest1$contact == "unknown", mode_val, banktest1$contact)
print(banktest1)
#Adding marital variable (single/divorced) with a Dummy variable 0/1
banktest1$new_marital <- ifelse(banktest1$marital == "single", 1,
ifelse(banktest1$marital == "divorced", 0,
ifelse(banktest1$marital == "married", 2, NA)))
#Adding education variable with a Dummy variable 0/1
banktest1$new_education <- ifelse(banktest1$education == "primary", 0,
ifelse(banktest1$education == "secondary", 1,
ifelse(banktest1$education == "tertiary", 2, NA)))
#adding housing variable (yes/no) with dummy variable 0/1
banktest1$new_housing <- ifelse(banktest1$housing == "no", 0, 1)
# check how many "unknown" values are left
banktest1 %>%
summarise_all(list(~sum(. == "unknown"))) %>%
gather(key = "variable", value = "nr_unknown") %>%
arrange(-nr_unknown)
install.packages("rpart")
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
library(caret)
columns <- c("age","marital","education","housing", "y")
bank_clean<-banktest1[columns]
str(bank_clean)
dim(bank_clean)
summary(bank_clean)
bank_clean$y <- factor(bank_clean$y)
set.seed(777)
train.index <- sample(1:nrow(bank_clean), 0.7*nrow(bank_clean))
bank_clean.train <- bank_clean[train.index,]
dim(bank_clean.train)
## select the 30% left as the testing data
bank_clean.test <- bank_clean[-train.index,]
dim(bank_clean.test)
# Default decision tree model
# Builds a decision tree from the banktest1 dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=6, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
## print the tree structure
summary(bank_clean.tree)
## MODEL EVALUATION
## make prediction using decision model
bank_clean.predictions <- predict(bank_clean.tree, bank_clean.test, type = "class")
head(bank_clean.predictions)
## Comparison table
bank_clean.comparison <- bank_clean.test
bank_clean.comparison$Predictions <- bank_clean.predictions
bank_clean.comparison[ , c("y", "Predictions")]
## View misclassified rows
disagreement.index <- bank_clean.comparison$y != bank_clean.comparison$Predictions
bank_clean.comparison[disagreement.index,]
##Confusion Matrix
confusion_matrix <- confusionMatrix(bank_clean.predictions, bank_clean.test$y)
print(confusion_matrix)
# Calculate accuracy, precision, and recall
cm <- confusionMatrix(bank_clean.predictions, bank_clean.test$y)
accuracy <- cm$overall["Accuracy"]
print(accuracy)
precision <- cm$byClass["Pos Pred Value"]
print(precision)
recall <- cm$byClass["Sensitivity"]
print(recall)
library(e1071)
library(caret)
bank_clean1<-bank_clean
bank_clean1$y <- factor(bank_clean1$y)
bank_clean1$y <- ifelse(bank_clean1$y == "yes", 1, 0)
set.seed(777)
train.index <- sample(1:nrow(bank_clean1), 0.7*nrow(bank_clean1))
bank_clean1.train <- bank_clean1[train.index,]
dim(bank_clean1.train)
## select the 30% left as the testing data
bank_clean1.test <- bank_clean1[-train.index,]
dim(bank_clean1.test)
# Build the SVM model
svm_model <- svm(y ~ ., data = bank_clean1.train, kernel = "radial")
formula<-y~age+marital+education+housing
# Visualize the model using a scatterplot
plot(svm_model, bank_clean1.train, formula)
model <- svm(y ~ ., data = bank_clean1.train)
plot(cmdscale(dist(bank_clean1.train[,-5])),
col = as.integer(bank_clean1.train[,5]),
pch = c("o","+")[1:150 %in% model$index + 1])
# Make predictions on the test data
bank_clean1.predictions <- predict(svm_model, bank_clean1.test, type = "class")
head(bank_clean1.predictions)
# Make predictions on the test data
bank_clean1.predictions <- predict(svm_model, bank_clean1.test, type = "class")
head(bank_clean1.predictions)
# Create a confusion matrix
confusion_matrix <- confusionMatrix(bank_clean1.predictions, bank_clean1.test$y)
print(confusion_matrix)
# Calculate accuracy, precision, and recall
cm <- confusionMatrix(bank_clean1.predictions, bank_clean1.test$y)
accuracy <- cm$overall["Accuracy"]
print(accuracy)
precision <- cm$byClass["Pos Pred Value"]
print(precision)
recall <- cm$byClass["Sensitivity"]
print(recall)
# Calculate accuracy, precision, and recall
bank_clean1$y <- factor(bank_clean1$y)
cm <- confusionMatrix(bank_clean1.predictions, bank_clean1.test$y)
accuracy <- cm$overall["Accuracy"]
print(accuracy)
precision <- cm$byClass["Pos Pred Value"]
print(precision)
recall <- cm$byClass["Sensitivity"]
print(recall)
library(e1071)
library(caret)
bank_clean1<-bank_clean
bank_clean1$y <- factor(bank_clean1$y)
bank_clean1$y <- ifelse(bank_clean1$y == "yes", 1, 0)
set.seed(777)
train.index <- sample(1:nrow(bank_clean1), 0.7*nrow(bank_clean1))
bank_clean1.train <- bank_clean1[train.index,]
dim(bank_clean1.train)
## select the 30% left as the testing data
bank_clean1.test <- bank_clean1[-train.index,]
dim(bank_clean1.test)
# Build the SVM model
svm_model <- svm(y ~ ., data = bank_clean1.train, kernel = "radial")
formula<-y~age+marital+education+housing
# Visualize the model using a scatterplot
plot(svm_model, bank_clean1.train, formula)
model <- svm(y ~ ., data = bank_clean1.train)
plot(cmdscale(dist(bank_clean1.train[,-5])),
col = as.integer(bank_clean1.train[,5]),
pch = c("o","+")[1:150 %in% model$index + 1])
# Make predictions on the test data
bank_clean1.predictions <- predict(svm_model, bank_clean1.test, type = "class")
head(bank_clean1.predictions)
# Create a confusion matrix
confusion_matrix <- confusionMatrix(bank_clean1.predictions, bank_clean1.test$y)
accuracy <- cm$overall["Accuracy"]
print(accuracy)
precision <- cm$byClass["Pos Pred Value"]
print(precision)
recall <- cm$byClass["Sensitivity"]
print(recall)
library(e1071)
library(caret)
bank_clean1<-bank_clean
bank_clean1$y <- factor(bank_clean1$y)
set.seed(777)
train.index <- sample(1:nrow(bank_clean1), 0.7*nrow(bank_clean1))
bank_clean1.train <- bank_clean1[train.index,]
dim(bank_clean1.train)
## select the 30% left as the testing data
bank_clean1.test <- bank_clean1[-train.index,]
dim(bank_clean1.test)
# Build the SVM model
svm_model <- svm(y ~ ., data = bank_clean1.train, kernel = "radial")
formula<-y~age+marital+education+housing
# Visualize the model using a scatterplot
plot(svm_model, bank_clean1.train, formula)
model <- svm(y ~ ., data = bank_clean1.train)
plot(cmdscale(dist(bank_clean1.train[,-5])),
col = as.integer(bank_clean1.train[,5]),
pch = c("o","+")[1:150 %in% model$index + 1])
# Make predictions on the test data
bank_clean1.predictions <- predict(svm_model, bank_clean1.test, type = "class")
head(bank_clean1.predictions)
# Create a confusion matrix
confusion_matrix <- confusionMatrix(bank_clean1.predictions, bank_clean1.test$y)
print(confusion_matrix)
# Calculate accuracy, precision, and recall
cm <- confusionMatrix(bank_clean2.predictions, bank_clean2.test$y)
precision <- cm$byClass["Pos Pred Value"]
print(precision)
recall <- cm$byClass["Sensitivity"]
print(recall)
library(e1071)
library(caret)
bank_clean1<-bank_clean
bank_clean$y <- factor(bank_clean$y)
set.seed(777)
# Build the SVM model
svm_model <- svm(y ~ ., data = bank_clean.train, kernel = "radial")
formula<-y~age+marital+education+housing
# Visualize the model using a scatterplot
plot(svm_model, bank_clean.train, formula)
model <- svm(y ~ ., data = bank_clean.train)
plot(cmdscale(dist(bank_clean1.train[,-5])),
col = as.integer(bank_clean.train[,5]),
pch = c("o","+")[1:150 %in% model$index + 1])
# Make predictions on the test data
bank_clean.predictions <- predict(svm_model, bank_clean.test, type = "class")
head(bank_clean.predictions)
# Create a confusion matrix
confusion_matrix <- confusionMatrix(bank_clean.predictions, bank_clean.test$y)
print(confusion_matrix)
# Calculate accuracy, precision, and recall
cm <- confusionMatrix(bank_clean.predictions, bank_clean.test$y)
accuracy <- cm$overall["Accuracy"]
print(accuracy)
precision <- cm$byClass["Pos Pred Value"]
print(precision)
recall <- cm$byClass["Sensitivity"]
print(recall)
bank <- read.csv("~/GitHub/Data-Analytic-ASS3/data set/bank.csv", sep=";")
View(bank)
library(dplyr)
library(tidyr)
banktest1 <- bank
banktest1 <- banktest1[, -which(names(banktest1) == "poutcome")]
# find rows with "unknown" values and remove them
banktest1 <- banktest1 %>%
filter_all(any_vars(!is.na(.) & . != "unknown"))
#change unknown to other value in job column
mode_val <- as.character(names(which.max(table(banktest1$job))))
banktest1$job <- ifelse(banktest1$job == "unknown", mode_val, banktest1$job)
print(banktest1)
#change unknown to other value in education column
mode_val <- as.character(names(which.max(table(banktest1$education))))
banktest1$education <- ifelse(banktest1$education == "unknown", mode_val, banktest1$education)
print(banktest1)
#change unknown to other value in contact column
mode_val <- as.character(names(which.max(table(banktest1$contact))))
banktest1$contact <- ifelse(banktest1$contact == "unknown", mode_val, banktest1$contact)
print(banktest1)
#Adding marital variable (single/divorced) with a Dummy variable 0/1
banktest1$new_marital <- ifelse(banktest1$marital == "single", 1,
ifelse(banktest1$marital == "divorced", 0,
ifelse(banktest1$marital == "married", 2, NA)))
#Adding education variable with a Dummy variable 0/1
banktest1$new_education <- ifelse(banktest1$education == "primary", 0,
ifelse(banktest1$education == "secondary", 1,
ifelse(banktest1$education == "tertiary", 2, NA)))
#adding housing variable (yes/no) with dummy variable 0/1
banktest1$new_housing <- ifelse(banktest1$housing == "no", 0, 1)
# check how many "unknown" values are left
banktest1 %>%
summarise_all(list(~sum(. == "unknown"))) %>%
gather(key = "variable", value = "nr_unknown") %>%
arrange(-nr_unknown)
install.packages("rpart")
install.packages("rpart")
library(rpart)
library(rpart.plot)
library(caret)
columns <- c("age","marital","education","housing", "y")
bank_clean<-banktest1[columns]
str(bank_clean)
dim(bank_clean)
summary(bank_clean)
bank_clean$y <- factor(bank_clean$y)
set.seed(777)
train.index <- sample(1:nrow(bank_clean), 0.7*nrow(bank_clean))
bank_clean.train <- bank_clean[train.index,]
dim(bank_clean.train)
## select the 30% left as the testing data
bank_clean.test <- bank_clean[-train.index,]
dim(bank_clean.test)
# Default decision tree model
# Builds a decision tree from the banktest1 dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=6, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
## print the tree structure
summary(bank_clean.tree)
## MODEL EVALUATION
## make prediction using decision model
bank_clean.predictions <- predict(bank_clean.tree, bank_clean.test, type = "class")
head(bank_clean.predictions)
## Comparison table
bank_clean.comparison <- bank_clean.test
bank_clean.comparison$Predictions <- bank_clean.predictions
bank_clean.comparison[ , c("y", "Predictions")]
## View misclassified rows
disagreement.index <- bank_clean.comparison$y != bank_clean.comparison$Predictions
bank_clean.comparison[disagreement.index,]
##Confusion Matrix
confusion_matrix <- confusionMatrix(bank_clean.predictions, bank_clean.test$y)
print(confusion_matrix)
# Calculate accuracy, precision, and recall
cm <- confusionMatrix(bank_clean.predictions, bank_clean.test$y)
accuracy <- cm$overall["Accuracy"]
print(accuracy)
precision <- cm$byClass["Pos Pred Value"]
print(precision)
recall <- cm$byClass["Sensitivity"]
print(recall)
library(e1071)
library(caret)
bank_clean1<-bank_clean
bank_clean$y <- factor(bank_clean$y)
set.seed(777)
# Build the SVM model
svm_model <- svm(y ~ ., data = bank_clean.train, kernel = "radial")
formula<-y~age+marital+education+housing
# Visualize the model using a scatterplot
plot(svm_model, bank_clean.train, formula)
model <- svm(y ~ ., data = bank_clean.train)
plot(cmdscale(dist(bank_clean1.train[,-5])),
col = as.integer(bank_clean.train[,5]),
pch = c("o","+")[1:150 %in% model$index + 1])
head(bank_clean.predictions)
# Create a confusion matrix
confusion_matrix <- confusionMatrix(bank_clean.predictions, bank_clean.test$y)
print(confusion_matrix)
# Calculate accuracy, precision, and recall
cm <- confusionMatrix(bank_clean.predictions, bank_clean.test$y)
accuracy <- cm$overall["Accuracy"]
print(accuracy)
precision <- cm$byClass["Pos Pred Value"]
print(precision)
recall <- cm$byClass["Sensitivity"]
print(recall)
library(e1071)
library(caret)
bank_clean1<-bank_clean
bank_clean$y <- factor(bank_clean$y)
set.seed(777)
# Build the SVM model
svm_model <- svm(y ~ ., data = bank_clean.train, kernel = "radial")
formula<-y~age+marital+education+housing
# Visualize the model using a scatterplot
plot(svm_model, bank_clean.train, formula)
model <- svm(y ~ ., data = bank_clean.train)
plot(cmdscale(dist(bank_clean.train[,-5])),
col = as.integer(bank_clean.train[,5]),
pch = c("o","+")[1:150 %in% model$index + 1])
# Make predictions on the test data
bank_clean.predictions <- predict(svm_model, bank_clean.test, type = "class")
head(bank_clean.predictions)
# Create a confusion matrix
confusion_matrix <- confusionMatrix(bank_clean.predictions, bank_clean.test$y)
print(confusion_matrix)
# Calculate accuracy, precision, and recall
cm <- confusionMatrix(bank_clean.predictions, bank_clean.test$y)
accuracy <- cm$overall["Accuracy"]
print(accuracy)
precision <- cm$byClass["Pos Pred Value"]
print(precision)
recall <- cm$byClass["Sensitivity"]
print(recall)
