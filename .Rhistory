str(iris)
dim(iris)
summary(iris)
################################################################################
## BUILD MODEL
## randomly choose 70% of the data set as training data
set.seed(777)#Why do you need to set seed?
train.index <- sample(1:nrow(iris), 0.7*nrow(iris))
iris.train <- iris[train.index,]
dim(iris.train)
## select the 30% left as the testing data
iris.test <- iris[-train.index,]
dim(iris.test)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
iris.tree <- rpart(Species~.,data=iris.train)
# Reports the model
print(iris.tree)
## VISUALIZE THE MODEL
## plot the tree structure
plot(iris.tree, margin=c(.1))
title(main = "Decision Tree Model of Iris Data")
text(iris.tree, use.n = TRUE)
## print the tree structure
summary(iris.tree)
## MODEL EVALUATION
## make prediction using decision model
iris.predictions <- predict(iris.tree, iris.test, type = "class")
head(iris.predictions)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean, method="class",control =rpart.control(minsplit =1,minbucket=2, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
plot(bank_clean.tree, margin=c(.1))
title(main = "Decision Tree Model of Iris Data")
text(bank_clean.tree, use.n = TRUE)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=2, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
plot(bank_clean.tree, margin=c(.1))
title(main = "Decision Tree Model of Iris Data")
text(bank_clean.tree, use.n = TRUE)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=6, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
plot(bank_clean.tree, margin=c(.1))
title(main = "Decision Tree Model of Iris Data")
text(bank_clean.tree, use.n = TRUE)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(age~.,data=bank_clean.train, method="class")
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
plot(bank_clean.tree, margin=c(.1))
title(main = "Decision Tree Model of Bank Data")
text(bank_clean.tree, use.n = TRUE)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(age~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=6, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
plot(bank_clean.tree, margin=c(.1))
title(main = "Decision Tree Model of Bank Data")
text(bank_clean.tree, use.n = TRUE)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=6, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
plot(bank_clean.tree)
title(main = "Decision Tree Model of Bank Data")
text(bank_clean.tree, use.n = TRUE)
## print the tree structure
summary(bank_clean.tree)
view(iris)
View(iris)
bank <- read.csv("~/GitHub/Data-Analytic-ASS3/data set/bank.csv", sep=";")
View(bank)
library(rpart)
bank <- read.csv("bank.csv", header = TRUE, sep = ";")
tree <- rpart(y ~ ., data = bank, method = "class")
plot(tree)
text(tree)
newdata <- data.frame(age = 35, job = "admin.", marital = "married", education = "university.degree", default = "no", housing = "yes", loan = "no", contact = "cellular", month = "may", day_of_week = "mon", duration = 200, campaign = 3, pdays = 999, previous = 0, poutcome = "nonexistent", emp.var.rate = 1.1, cons.price.idx = 93.994, cons.conf.idx = -36.4, euribor3m = 4.857, nr.employed = 5191)
predict(tree, newdata = newdata, type = "class")
bank <- read.csv("~/GitHub/Data-Analytic-ASS3/data set/bank.csv", sep=";")
View(bank)
banktest1 <- bank
banktest1 <- banktest1[, -which(names(banktest1) == "poutcome")]
# find rows with "unknown" values and remove them
banktest1 <- banktest1 %>%
filter_all(any_vars(!is.na(.) & . != "unknown"))
#change unknown to other value in job column
mode_val <- as.character(names(which.max(table(banktest1$job))))
banktest1$job <- ifelse(banktest1$job == "unknown", mode_val, banktest1$job)
print(banktest1)
View(banktest1)
#change unknown to other value in education column
mode_val <- as.character(names(which.max(table(banktest1$education))))
banktest1$education <- ifelse(banktest1$education == "unknown", mode_val, banktest1$education)
print(banktest1)
View(banktest1)
#change unknown to other value in contact column
mode_val <- as.character(names(which.max(table(banktest1$contact))))
banktest1$contact <- ifelse(banktest1$contact == "unknown", mode_val, banktest1$contact)
print(banktest1)
View(banktest1)
#Adding marital variable (single/divorced) with a Dummy variable 0/1
banktest1$new_marital <- ifelse(banktest1$marital == "single", "s",
ifelse(banktest1$marital == "divorced", "d",
ifelse(banktest1$marital == "married", "m", NA)))
#Adding education variable with a Dummy variable 0/1
banktest1$new_education <- ifelse(banktest1$education == "primary", "p",
ifelse(banktest1$education == "secondary", "S",
ifelse(banktest1$education == "tertiary", "t", NA)))
#adding housing variable (yes/no) with dummy variable 0/1
banktest1$new_housing <- ifelse(banktest1$housing == "no", "n", "y")
# Adding loan variable with a Dummy variable 0/1
banktest1$new_loan <- ifelse(banktest1$loan == "no", "n", "y")
# display the resulting data
View(banktest1)
# check how many "unknown" values are left
banktest1 %>%
summarise_all(list(~sum(. == "unknown"))) %>%
gather(key = "variable", value = "nr_unknown") %>%
arrange(-nr_unknown)
columns <- c("age","new_marital","new_education","new_housing", "new_loan", "y")
bank_clean<-banktest1[columns]
str(bank_clean)
dim(bank_clean)
summary(bank_clean)
set.seed(555)#Why do you need to set seed?
train.index <- sample(1:nrow(bank_clean), 0.7*nrow(bank_clean))
bank_clean.train <- bank_clean[train.index,]
dim(bank_clean.train)
## select the 30% left as the testing data
bank_clean.test <- bank_clean[-train.index,]
dim(bank_clean.test)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=6, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
plot(bank_clean.tree)
title(main = "Decision Tree Model of Bank Data")
text(bank_clean.tree, use.n = TRUE)
## print the tree structure
summary(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
install.packages("rpart.plot")
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
title(main = "Decision Tree Model of Bank Data")
text(bank_clean.tree, use.n = TRUE)
## print the tree structure
summary(bank_clean.tree)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class")
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
title(main = "Decision Tree Model of Bank Data")
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=20, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
title(main = "Decision Tree Model of Bank Data")
rpart.plot(bank_clean.tree)
View(bank_clean)
View(bank_clean)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=6, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=6, cp=0))
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=6, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
title(main = "Decision Tree Model of Bank Data")
text(bank_clean.tree, use.n = TRUE)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=10, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=9, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=8, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=8, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
plot(bank_clean.tree)
title(main = "Decision Tree Model of Bank Data")
text(bank_clean.tree, use.n = TRUE)
plot(bank_clean.tree,margin = "1")
plot(bank_clean.tree, margin=c(.1))
title(main = "Decision Tree Model of Bank Data")
text(bank_clean.tree, use.n = TRUE)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=8, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree, margin=c(.1))
rpart.plot(bank_clean.tree)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class")
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
title(main = "Decision Tree Model of Bank Data")
text(bank_clean.tree, use.n = TRUE)
## print the tree structure
summary(bank_clean.tree)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=7, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=6, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
title(main = "Decision Tree Model of Bank Data")
text(bank_clean.tree, use.n = TRUE)
columns <- c("age","new_marital","new_education","new_housing", "y")
bank_clean<-banktest1[columns]
str(bank_clean)
dim(bank_clean)
summary(bank_clean)
set.seed(555)#Why do you need to set seed?
train.index <- sample(1:nrow(bank_clean), 0.7*nrow(bank_clean))
bank_clean.train <- bank_clean[train.index,]
dim(bank_clean.train)
## select the 30% left as the testing data
bank_clean.test <- bank_clean[-train.index,]
dim(bank_clean.test)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=6, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
title(main = "Decision Tree Model of Bank Data")
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=7, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
rpart.plot(bank_clean.tree)
text(bank_clean.tree, use.n = TRUE)
## make prediction using decision model
bank_clean.predictions <- predict(bank_clean.tree, bank_clean.test, type = "class")
head(bank_clean.predictions)
## Comparison table
bank_clean.comparison <- bank_clean.test
bank_clean.comparison$Predictions <- bank_clean.predictions
bank_clean.comparison[ , c("y", "Predictions")]
## View misclassified rows
disagreement.index <- bank_clean.comparison$y != bank_clean.comparison$Predictions
bank_clean.comparison[disagreement.index,]
gc()
columns <- c("age","marital","education","housing", "y")
bank_clean<-banktest1[columns]
str(bank_clean)
dim(bank_clean)
bank_clean<-bank[columns]
bank <- read.csv("~/GitHub/Data-Analytic-ASS3/data set/bank.csv", sep=";")
View(bank)
bank_clean<-bank[columns]
str(bank_clean)
dim(bank_clean)
summary(bank_clean)
set.seed(555)#Why do you need to set seed?
train.index <- sample(1:nrow(bank_clean), 0.7*nrow(bank_clean))
bank_clean.train <- bank_clean[train.index,]
dim(bank_clean.train)
## select the 30% left as the testing data
bank_clean.test <- bank_clean[-train.index,]
dim(bank_clean.test)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=7, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
text(bank_clean.tree, use.n = TRUE)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=7, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
text(bank_clean.tree, use.n = TRUE)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=6, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
text(bank_clean.tree, use.n = TRUE)
## print the tree structure
summary(bank_clean.tree)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=5, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=4, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=3, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
text(bank_clean.tree, use.n = TRUE)
set.seed(777)#Why do you need to set seed?
train.index <- sample(1:nrow(bank_clean), 0.7*nrow(bank_clean))
bank_clean.train <- bank_clean[train.index,]
dim(bank_clean.train)
## select the 30% left as the testing data
bank_clean.test <- bank_clean[-train.index,]
dim(bank_clean.test)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=3, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
text(bank_clean.tree, use.n = TRUE)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=3, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=5, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
# Default decision tree model
# Builds a decision tree from the iris dataset to predict
# species given all other columns as predictors
bank_clean.tree <- rpart(y~.,data=bank_clean.train, method="class",control =rpart.control(minsplit =1,minbucket=6, cp=0))
# Reports the model
print(bank_clean.tree)
## VISUALIZE THE MODEL
## plot the tree structure
library(rpart.plot)
rpart.plot(bank_clean.tree)
text(bank_clean.tree, use.n = TRUE)
## print the tree structure
summary(bank_clean.tree)
